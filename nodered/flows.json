[
    {
        "id": "cefe46de0f9e8bf2",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43920f70bb67f7a3",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a07a3a816eaec58c",
        "type": "subflow",
        "name": "LA66 Send Uplink",
        "info": "",
        "category": "LA66",
        "in": [
            {
                "x": 280,
                "y": 260,
                "wires": [
                    {
                        "id": "8fb6b348aa5150d7"
                    },
                    {
                        "id": "becea286b80c26c7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 40,
                "wires": [
                    {
                        "id": "1ed3456d086a37d7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "LA66"
        },
        "color": "#D7D7A0",
        "icon": "font-awesome/fa-cloud-upload"
    },
    {
        "id": "6b3093f604f98391",
        "type": "subflow",
        "name": "LA66 Receive Downlink",
        "info": "",
        "category": "LA66",
        "in": [],
        "out": [
            {
                "x": 1160,
                "y": 100,
                "wires": [
                    {
                        "id": "fb2d7f6a31fbd516",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#D7D7A0",
        "icon": "font-awesome/fa-cloud-download"
    },
    {
        "id": "a5abbb3a16eadc3a",
        "type": "subflow",
        "name": "Hash DevEui",
        "info": "",
        "category": "DevEui Hash",
        "in": [
            {
                "x": 140,
                "y": 260,
                "wires": [
                    {
                        "id": "937df319ac6aca3a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 260,
                "wires": [
                    {
                        "id": "937df319ac6aca3a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/hash.svg"
    },
    {
        "id": "582ff7246177f8ba",
        "type": "subflow",
        "name": "Pack Payload",
        "info": "",
        "category": "DevEui Hash",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "71c696223a53be8b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 100,
                "wires": [
                    {
                        "id": "b54225f956107e04",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "f76fbcb904e1309a",
        "type": "subflow",
        "name": "Save Hash and Get Eui",
        "info": "",
        "category": "DevEui Hash",
        "in": [
            {
                "x": 340,
                "y": 240,
                "wires": [
                    {
                        "id": "7ff0c5aee3d88df5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 200,
                "wires": [
                    {
                        "id": "7ff0c5aee3d88df5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-cloud"
    },
    {
        "id": "fd94572cb0e8888e",
        "type": "subflow",
        "name": "Forward All LA66 Downlinks",
        "info": "",
        "category": "LA66",
        "in": [
            {
                "x": 60,
                "y": 200,
                "wires": [
                    {
                        "id": "cf7c41dee34022ad"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#D7D7A0",
        "icon": "font-awesome/fa-mail-forward"
    },
    {
        "id": "5d0bac2844046b31",
        "type": "subflow",
        "name": "Forward LA66 Downlink",
        "info": "",
        "category": "LA66",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "5a19c3f98d422c9e"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#D7D7A0",
        "icon": "font-awesome/fa-mail-forward"
    },
    {
        "id": "f7c4ff8c9da31da4",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "584f6caa86cf7a5f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "86c11333eddb56d2",
        "type": "serial-port",
        "name": "LoRa-USB",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\r\\n",
        "bin": "false",
        "out": "char",
        "addchar": "\\r\\n",
        "responsetimeout": "500"
    },
    {
        "id": "69ea3ec72677a2a7",
        "type": "function",
        "z": "a07a3a816eaec58c",
        "name": "SEND MSG",
        "func": "\n// https://developer.mozilla.org/en-US/docs/Glossary/Base64\nfunction base64ToBytes(base64) {\n    const binString = Buffer.from(base64, 'base64');\n    \n    return binString\n}\n\nfunction byteToString(byte){\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n}\n\n// https://stackoverflow.com/questions/34309988/byte-array-to-hex-string-conversion-in-javascript#34310051\nfunction toHexString(byteArray) {\n    return Array.from(byteArray, function (byte) {\n        return byteToString(byte);\n    }).join('')\n}\n\nconst data = msg.payload.msg\nconst bytes = base64ToBytes(data.rawData)\nlet sendString = \"AT+SENDB=\"\n\nsendString += (data.confirmed ? \"1\" : \"0\") + \",\"\nsendString += data.fPort + \",\"\nsendString += (bytes.length + 1) + \",\"\nsendString += byteToString(data.hash)\nsendString += toHexString(bytes)\n\nmsg.payload = sendString\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "7c8386a2d17a03e2"
            ]
        ]
    },
    {
        "id": "3bf34f308eab24a3",
        "type": "serial in",
        "z": "a07a3a816eaec58c",
        "name": "Read",
        "serial": "86c11333eddb56d2",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "1ed3456d086a37d7",
                "77f58cad241ab74c"
            ]
        ]
    },
    {
        "id": "b393b45e25327a33",
        "type": "serial out",
        "z": "a07a3a816eaec58c",
        "name": "Send Message",
        "serial": "86c11333eddb56d2",
        "x": 1280,
        "y": 260,
        "wires": []
    },
    {
        "id": "1ed3456d086a37d7",
        "type": "function",
        "z": "a07a3a816eaec58c",
        "name": "Is Send Ok",
        "func": "if(msg.payload.includes(\"rxDone\")){\n    msg.payload = msg.payload.trim()\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7c8386a2d17a03e2",
        "type": "delay",
        "z": "a07a3a816eaec58c",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "9",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 280,
        "wires": [
            [
                "b393b45e25327a33"
            ]
        ]
    },
    {
        "id": "8e844b48ae104167",
        "type": "serial out",
        "z": "a07a3a816eaec58c",
        "name": "Send IsJoined",
        "serial": "86c11333eddb56d2",
        "x": 900,
        "y": 360,
        "wires": []
    },
    {
        "id": "8fb6b348aa5150d7",
        "type": "change",
        "z": "a07a3a816eaec58c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "msg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 220,
        "wires": [
            [
                "54b28727fd035b65"
            ]
        ]
    },
    {
        "id": "77f58cad241ab74c",
        "type": "function",
        "z": "a07a3a816eaec58c",
        "name": "Is Join Ok?",
        "func": "if(msg.payload.includes(\"OK\")){\n    msg.complete = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "54b28727fd035b65"
            ]
        ]
    },
    {
        "id": "54b28727fd035b65",
        "type": "join",
        "z": "a07a3a816eaec58c",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 650,
        "y": 260,
        "wires": [
            [
                "69ea3ec72677a2a7"
            ]
        ]
    },
    {
        "id": "becea286b80c26c7",
        "type": "function",
        "z": "a07a3a816eaec58c",
        "name": "Is Joined? ",
        "func": "msg.payload = \"AT+JOIN?\"\nmsg.topic = \"Command\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "54b28727fd035b65",
                "c621c96646b73326"
            ]
        ]
    },
    {
        "id": "c621c96646b73326",
        "type": "delay",
        "z": "a07a3a816eaec58c",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 380,
        "wires": [
            [
                "8e844b48ae104167"
            ]
        ]
    },
    {
        "id": "b40b6a3d0b65dc0b",
        "type": "serial in",
        "z": "6b3093f604f98391",
        "name": "LA66 Receive",
        "serial": "86c11333eddb56d2",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "589c60b4bb41b418"
            ]
        ]
    },
    {
        "id": "589c60b4bb41b418",
        "type": "function",
        "z": "6b3093f604f98391",
        "name": "Downlink Received?",
        "func": "if(msg.payload.includes(\"AT+RECVB=?\")){\n    msg.payload = \"AT+RECVB=?\"\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [
                "82902624940235d7"
            ]
        ]
    },
    {
        "id": "82902624940235d7",
        "type": "serial request",
        "z": "6b3093f604f98391",
        "name": "Get Downlink Payload",
        "serial": "86c11333eddb56d2",
        "x": 700,
        "y": 100,
        "wires": [
            [
                "fb2d7f6a31fbd516"
            ]
        ]
    },
    {
        "id": "fb2d7f6a31fbd516",
        "type": "function",
        "z": "6b3093f604f98391",
        "name": "Extract Payload And Port",
        "func": "// Example Input Payload: \\n1:000000\n\nconst data = msg.payload.trim().split(\":\")\nmsg.payload = data[1]\nmsg.port = data[0]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 80,
        "wires": [
            [
                "c25ed181938df685"
            ]
        ]
    },
    {
        "id": "c25ed181938df685",
        "type": "mqtt out",
        "z": "6b3093f604f98391",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7c4ff8c9da31da4",
        "x": 1170,
        "y": 280,
        "wires": []
    },
    {
        "id": "937df319ac6aca3a",
        "type": "function",
        "z": "a5abbb3a16eadc3a",
        "name": "Decoder",
        "func": "const devEui = msg.payload.devEui;\n\nif(devEui.length === 16){\n    const charArray = [...devEui];\n    let hash = 0; \n\n    charArray.forEach(function(element) {\n        hash = hash ^ element;\n    });\n\n    msg.payload = {\n        ...msg.payload,\n        hash: hash\n    }\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "71c696223a53be8b",
        "type": "function",
        "z": "582ff7246177f8ba",
        "name": "Build Payload",
        "func": "const deviceInfo = msg.payload.deviceInfo;\nconst confirmed = msg.payload.confirmed\nconst rawData = msg.payload.data\nconst fPort = msg.payload.fPort\nconst devEui = deviceInfo.devEui\n\nlet data = {\n    confirmed: confirmed,\n    rawData: rawData,\n    fPort: fPort,\n    devEui: devEui,\n}\n\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "b54225f956107e04"
            ]
        ]
    },
    {
        "id": "b54225f956107e04",
        "type": "subflow:a5abbb3a16eadc3a",
        "z": "582ff7246177f8ba",
        "name": "",
        "x": 420,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "58bfaad5a77534f5",
        "type": "mqtt in",
        "z": "f76fbcb904e1309a",
        "name": "",
        "topic": "application/+/device/+/event/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f7c4ff8c9da31da4",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "797dd7fe1efdf97c"
            ]
        ]
    },
    {
        "id": "7ff0c5aee3d88df5",
        "type": "function",
        "z": "f76fbcb904e1309a",
        "name": "Save Hash and Get Eui",
        "func": "const hash = msg.payload.hash ? \"0\" + msg.payload.hash.toString(16).slice(-2) : undefined;\nconst devEui = msg.payload.devEui;\n\nlet list = context.get(\"list\")||{};\n\n// Message Contains Hash and DevEui - Save\nif(hash && devEui){\n    if(!list[hash]){\n        list[hash] = devEui;\n        context.set(\"list\", list);\n    }\n}\n\n// Message Is A String - Return DevEui\nif((typeof msg.payload === 'string' || msg.payload instanceof String)){\n    const h = msg.payload.substring(0, 2)\n    msg[\"devEui\"] = list[h]\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "589e47081a75711f",
        "type": "subflow:a5abbb3a16eadc3a",
        "z": "f76fbcb904e1309a",
        "name": "",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "7ff0c5aee3d88df5"
            ]
        ]
    },
    {
        "id": "797dd7fe1efdf97c",
        "type": "function",
        "z": "f76fbcb904e1309a",
        "name": "Get Dev Eui",
        "func": "const deviceInfo = msg.payload.deviceInfo;\nconst devEui = deviceInfo.devEui\nmsg.payload = {devEui: devEui};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "589e47081a75711f"
            ]
        ]
    },
    {
        "id": "cf7c41dee34022ad",
        "type": "subflow:f76fbcb904e1309a",
        "z": "fd94572cb0e8888e",
        "name": "",
        "x": 240,
        "y": 220,
        "wires": [
            [
                "168dda8d71eab3f7"
            ]
        ]
    },
    {
        "id": "168dda8d71eab3f7",
        "type": "subflow:5d0bac2844046b31",
        "z": "fd94572cb0e8888e",
        "name": "",
        "x": 510,
        "y": 200,
        "wires": []
    },
    {
        "id": "dd519ebe2968db2d",
        "type": "debug",
        "z": "5d0bac2844046b31",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "5a19c3f98d422c9e",
        "type": "function",
        "z": "5d0bac2844046b31",
        "name": "PayloadToBase64",
        "func": "let data = msg.payload\n\nif(data.length % 2 === 0 && data.length !== 0){\n    data = data.substr(2)\n    let hexArray = []\n    for(let i = 0; i < data.length; i = i + 2){\n        const hex = data.charAt(i) + data.charAt(i+1);\n        console.log(hex);\n        hexArray.push(parseInt(hex, 16))\n    }\n    const buff = Buffer.from(hexArray);\n    const base64String = buff.toString('base64');\n    \n    msg.payload = base64String;\n\n    return msg;\n\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 180,
        "wires": [
            [
                "9d25ad936db3a425"
            ]
        ]
    },
    {
        "id": "9d25ad936db3a425",
        "type": "function",
        "z": "5d0bac2844046b31",
        "name": "Build MQTT Downlink",
        "func": "msg.topic = \"application/93d7f4c6-6061-422b-88d6-0a25358528bd/device/\" + msg.devEui + \"/command/down\"\nmsg.payload = {\n    \"devEui\": msg.devEui,\n    \"fPort\": msg.port,\n    \"data\": msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "fef07e3102b16154"
            ]
        ]
    },
    {
        "id": "fef07e3102b16154",
        "type": "change",
        "z": "5d0bac2844046b31",
        "name": "Set confirmed",
        "rules": [
            {
                "t": "set",
                "p": "payload.confirmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 180,
        "wires": [
            [
                "dd519ebe2968db2d",
                "52a601ee3b19fc6a"
            ]
        ]
    },
    {
        "id": "52a601ee3b19fc6a",
        "type": "mqtt out",
        "z": "5d0bac2844046b31",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7c4ff8c9da31da4",
        "x": 850,
        "y": 240,
        "wires": []
    },
    {
        "id": "4dc48e3252d6ba79",
        "type": "mqtt in",
        "z": "cefe46de0f9e8bf2",
        "name": "",
        "topic": "application/+/device/+/event/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f7c4ff8c9da31da4",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "f2075753f604a2eb"
            ]
        ]
    },
    {
        "id": "bdf194cf06eabce6",
        "type": "influxdb out",
        "z": "cefe46de0f9e8bf2",
        "influxdb": "584f6caa86cf7a5f",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "lora",
        "bucket": "lora-test",
        "x": 810,
        "y": 440,
        "wires": []
    },
    {
        "id": "f2075753f604a2eb",
        "type": "function",
        "z": "cefe46de0f9e8bf2",
        "name": "function 1",
        "func": "const deviceInfo = msg.payload.deviceInfo;\nconst payload = msg.payload.object;\nconst rxInfo = msg.payload.rxInfo[0];\nconst txInfo = msg.payload.txInfo.modulation.lora;\n\n\nlet data = {\n    ...(payload),\n\n    sf: txInfo.spreadingFactor,\n    bandwith: txInfo.bandwidth,\n    rssi: rxInfo.rssi,\n    snr: rxInfo.snr,\n    frameCounter: msg.payload.fCnt,\n}\n\nmsg.measurement = deviceInfo.deviceName;\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            [
                "bdf194cf06eabce6"
            ]
        ]
    },
    {
        "id": "ac1c0dabc09faf82",
        "type": "subflow:a07a3a816eaec58c",
        "z": "43920f70bb67f7a3",
        "name": "",
        "x": 990,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "95c7f105e2620929",
        "type": "mqtt in",
        "z": "43920f70bb67f7a3",
        "name": "",
        "topic": "application/+/device/70b3d5581000003d/event/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f7c4ff8c9da31da4",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 620,
        "wires": [
            [
                "c04ec8f78740a975"
            ]
        ]
    },
    {
        "id": "8e8527c443702c53",
        "type": "subflow:6b3093f604f98391",
        "z": "43920f70bb67f7a3",
        "name": "",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "9a2cba20cc9d5d7e"
            ]
        ]
    },
    {
        "id": "cc7f5ec4fd4d3175",
        "type": "mqtt in",
        "z": "43920f70bb67f7a3",
        "name": "",
        "topic": "application/+/device/relay/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f7c4ff8c9da31da4",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 480,
        "wires": [
            [
                "f273a55573f1cecc"
            ]
        ]
    },
    {
        "id": "c04ec8f78740a975",
        "type": "subflow:582ff7246177f8ba",
        "z": "43920f70bb67f7a3",
        "name": "",
        "x": 620,
        "y": 600,
        "wires": [
            [
                "ac1c0dabc09faf82"
            ]
        ]
    },
    {
        "id": "f273a55573f1cecc",
        "type": "subflow:a5abbb3a16eadc3a",
        "z": "43920f70bb67f7a3",
        "name": "",
        "x": 600,
        "y": 500,
        "wires": [
            [
                "ac1c0dabc09faf82"
            ]
        ]
    },
    {
        "id": "9a2cba20cc9d5d7e",
        "type": "subflow:fd94572cb0e8888e",
        "z": "43920f70bb67f7a3",
        "name": "",
        "x": 460,
        "y": 780,
        "wires": []
    }
]